import React from 'react';
import { ChatMessage } from '../types';

const UserIcon = () => (
    <div className="w-8 h-8 rounded-full bg-cyan-500 flex items-center justify-center font-bold text-white text-sm">
        YOU
    </div>
);

const ModelIcon = () => (
    <div className="w-8 h-8 rounded-full bg-slate-600 flex items-center justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5 text-cyan-300" viewBox="0 0 24 24" fill="currentColor">
            <path fillRule="evenodd" d="M9 4.5a.75.75 0 0 1 .75.75v1.5a.75.75 0 0 1-1.5 0v-1.5A.75.75 0 0 1 9 4.5Zm6.75 0a.75.75 0 0 1 .75.75v1.5a.75.75 0 0 1-1.5 0v-1.5a.75.75 0 0 1 .75-.75ZM9 15a.75.75 0 0 1 .75.75v1.5a.75.75 0 0 1-1.5 0v-1.5A.75.75 0 0 1 9 15Zm6.75 0a.75.75 0 0 1 .75.75v1.5a.75.75 0 0 1-1.5 0v-1.5a.75.75 0 0 1 .75-.75ZM5.25 9.75a.75.75 0 0 0-1.5 0v4.5a.75.75 0 0 0 1.5 0v-4.5ZM19.5 9.75a.75.75 0 0 0-1.5 0v4.5a.75.75 0 0 0 1.5 0v-4.5Z" clipRule="evenodd" />
            <path d="M12 7.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9ZM6.75 12a5.25 5.25 0 1 1 10.5 0 5.25 5.25 0 0 1-10.5 0Z" />
        </svg>
    </div>
);

const PaperClipIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className={className || "w-6 h-6"}>
        <path fillRule="evenodd" d="M18.97 3.659a2.25 2.25 0 0 0-3.182 0l-10.12 10.12a.75.75 0 0 0 1.06 1.061l10.12-10.12a.75.75 0 0 1 1.06 0a.75.75 0 0 1 0 1.06l-8.995 8.994a1.5 1.5 0 0 1-2.121 0a1.5 1.5 0 0 1 0-2.121l7.93-7.93a2.25 2.25 0 0 0-3.182-3.182l-7.93 7.93a4.5 4.5 0 0 0 6.364 6.364l8.995-8.994a2.25 2.25 0 0 0 0-3.182Z" clipRule="evenodd" />
    </svg>
);


interface MessageBubbleProps {
  message: ChatMessage;
  isStreaming: boolean;
  onImageClick: (imageUrl: string) => void;
}

export const MessageBubble: React.FC<MessageBubbleProps> = ({ message, isStreaming, onImageClick }) => {
  const isUser = message.role === 'user';
  
  const formattedText = message.text.split('\n').map((line, index) => (
    <React.Fragment key={index}>
      {line}
      <br />
    </React.Fragment>
  ));

  return (
    <div className={`flex items-start gap-4 ${isUser ? 'justify-end' : ''}`}>
      {!isUser && <ModelIcon />}
      <div
        className={`max-w-xl rounded-2xl px-5 py-3 shadow-lg flex flex-col ${
          isUser
            ? 'bg-cyan-600 text-white rounded-br-none'
            : 'bg-slate-700 text-slate-200 rounded-bl-none'
        }`}
      >
        {message.attachedFile && (
            <div className="flex items-center gap-3 p-2 mb-2 rounded-lg bg-cyan-700/70 border border-cyan-500/50">
                <PaperClipIcon className="w-5 h-5 text-cyan-200 flex-shrink-0"/>
                <p className="text-sm text-cyan-100 font-medium truncate" title={message.attachedFile.name}>
                    {message.attachedFile.name}
                </p>
            </div>
        )}
        {message.promptImageUrl && (
            <img 
                src={message.promptImageUrl}
                alt="User capture"
                className="rounded-lg max-w-xs mb-2 shadow-md"
            />
        )}
        {(message.text || isStreaming) && (
            <p className="text-base leading-relaxed whitespace-pre-wrap">
                {formattedText}
                {isStreaming && !message.imageUrl && <span className="inline-block w-2 h-4 bg-slate-300 animate-pulse ml-1"></span>}
            </p>
        )}
        {message.imageUrl && (
            <div 
                className={`cursor-pointer group relative ${message.text ? 'mt-4' : ''}`}
                onClick={() => onImageClick(message.imageUrl!)}
            >
                <img 
                    src={message.imageUrl} 
                    alt="Generated by MIDIN AI" 
                    className="rounded-lg max-w-xs shadow-lg transition-transform duration-300 group-hover:scale-105" 
                />
                 <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 flex items-center justify-center transition-opacity duration-300 rounded-lg">
                    <p className="text-white text-sm font-bold opacity-0 group-hover:opacity-100 transition-opacity duration-300">Lihat & Unduh</p>
                </div>
            </div>
        )}
      </div>
      {isUser && <UserIcon />}
    </div>
  );
};
